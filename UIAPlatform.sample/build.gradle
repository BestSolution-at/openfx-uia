plugins {
    id "application"
}

java {
    withSourcesJar()

    toolchain {
        // since auto detection is disabled only the env var JDK8FX is picked up as java 8 toolchain (see gradle.properties)
        // it seems not possible to query for toolchains with included JavaFX...
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
    manifest {
        attributes('Git-Hash':"${gitHash}")
        attributes('Git-Version': "${gitVersion}")
    }
    from sourceSets.main.output
}

repositories {
    mavenCentral()
}

configurations {
    agent
    includedJars
    withLogging
}

dependencies {
    implementation project(":UIAPlatform")
    agent project(":UIAPlatform.agent")

    includedJars project(":UIAPlatform.agent")
    includedJars project(":UIAPlatform")

    withLogging project(":UIAPlatform.logger")
    withLogging 'org.slf4j:slf4j-api:2.0.0-alpha7'
    withLogging 'org.slf4j:slf4j-simple:2.0.0-alpha7'
}

def getAgentJar() {
    configurations.agent.files[0]
}

sourceSets {
    main {
        java {
        }
    }
    launcher {
        java {
        }
    }
}

task phatJar(type: Jar) {
    dependsOn configurations.includedJars

    archiveBaseName = "launcher"
    from sourceSets.launcher.output
    from configurations.includedJars.files
    //from configurations.runtimeClasspath.files
    from configurations.runtimeElements.artifacts.files
    manifest {
        attributes 'Main-Class': 'uia.sample.PlatformLauncher'
    }
}

task runWithAgentWithLogging(type: JavaExec) {
    dependsOn configurations.agent

    dependsOn configurations.withLogging
    classpath configurations.withLogging

  	group = 'application'
	  description = 'Runs the sample with the glass platfrom configured'

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }

    classpath sourceSets.main.runtimeClasspath
    mainClass = 'uia.sample.Simple'

    systemProperties "uia.log": true
    jvmArgs "-javaagent:${getAgentJar()}"
    // jvmArgs "-verbose:jni"
}

task runWithAgent(type: JavaExec) {
    dependsOn configurations.agent

  	group = 'application'
	  description = 'Runs the sample with the glass platfrom configured'

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }

    classpath sourceSets.main.runtimeClasspath
    mainClass = 'uia.sample.Simple'

    systemProperties "uia.log": true
    jvmArgs "-javaagent:${getAgentJar()}"
    // jvmArgs "-verbose:jni"
}

task debugWithAgent(type: JavaExec) {
    dependsOn configurations.agent
    
  	group = 'application'
	description = 'Runs the sample with the glass platfrom configured'

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(8)
    }

	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'uia.sample.Simple'

    systemProperties "uia.log": true
    jvmArgs "-javaagent:${getAgentJar()}"
    jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,address=5005'
}

// create run tasks for all issue classes
fileTree("${project.projectDir}/src/main/java/uia/issues")
.matching {
    include "*.java"
}.each {
    String className = it.name.replaceAll("[.]java", "")
    String taskName = "runIssue-" + className
    String fullClassName = "uia.issues." + className

    tasks.create(name: taskName, type: JavaExec) {
        dependsOn configurations.agent

        group = 'Issues'
        description = "Runs the issue sample ${className}"

        javaLauncher = javaToolchains.launcherFor {
            languageVersion = JavaLanguageVersion.of(8)
        }

        classpath sourceSets.main.runtimeClasspath
        mainClass = fullClassName

        systemProperties "uia.log": true
        jvmArgs "-javaagent:${getAgentJar()}"
        // jvmArgs "-verbose:jni"
    }
}

// task runTestUiaTextArea(type: JavaExec) {
//   dependsOn configurations.agent

//   dependsOn configurations.withLogging
//   classpath configurations.withLogging

//   group = 'application'
//   description = 'Runs the sample with the glass platfrom configured'

//   javaLauncher = javaToolchains.launcherFor {
//       languageVersion = JavaLanguageVersion.of(8)
//   }

//   classpath sourceSets.main.runtimeClasspath
//   mainClass = 'uia.sample.TestUiaTextArea'

//   systemProperties "uia.log": true
//   jvmArgs "-javaagent:${getAgentJar()}"
//   // jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,address=5005'
//   // jvmArgs "-verbose:jni"
// }


// task runNotepad(type: JavaExec) {
//   dependsOn configurations.agent

//   dependsOn configurations.withLogging
//   classpath configurations.withLogging

//   group = 'application'
//   description = 'Runs the sample with the glass platfrom configured'

//   javaLauncher = javaToolchains.launcherFor {
//       languageVersion = JavaLanguageVersion.of(8)
//   }

//   classpath sourceSets.main.runtimeClasspath
//   mainClass = 'uia.sample.samples.notepad.TextAst'

//   systemProperties "uia.log": true
//   jvmArgs "-javaagent:${getAgentJar()}"
//   // jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,address=5005'
//   // jvmArgs "-verbose:jni"
// }

task runAlert(type: JavaExec) {
  dependsOn configurations.agent

  dependsOn configurations.withLogging
  classpath configurations.withLogging

  group = 'application'
  description = 'Runs the sample with the glass platfrom configured'

  javaLauncher = javaToolchains.launcherFor {
      languageVersion = JavaLanguageVersion.of(8)
  }

  classpath sourceSets.main.runtimeClasspath
  mainClass = 'uia.sample.AlertSample'

  systemProperties "uia.log": true
  jvmArgs "-javaagent:${getAgentJar()}"
  // jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,address=5005'
  // jvmArgs "-verbose:jni"
}
